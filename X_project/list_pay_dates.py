from X_project.my_dates_funcs import *

# -----------------------------------------------------------
# Початкові дані: дата відкриття договору, срок, день оплати
# -----------------------------------------------------------

# Дата відкриття договору (поки використовуємо сьогоднішню дату):
start_date = datetime.today().date()
start_date = date(2025, 7,31)   # А якщо в останній день місяця?

# День щомісячної оплати
day_of_pay = 15

# Якщо допустити випадок, коли договір відкривається в останні дні місяця (наприклад, 31 числа),
# а перша оплата за умовами договору має бути в перші дні місяця (наприклад 1 числа), то може скластися ситуація
# коли перша оплата має бути буквально через день-кілька днів від моменту відкриття договору.
# Тому є сенс в таких випадках пропонувати клієнту змістити дату першої оплати на пізнішу дату....
# Допустима різниця між початковою датою договору та датою першої оплати
# коли потрібно пропонувати перенести першу оплату на місяць пізніше (за замовчуванням 10 днів)
delta_days = 10

# Термін дії договору
srok = 12


# Дату першої оплати отримуємо окремо з використанням декоратора:
# Присвоюємо змінній temp_func декоратор date_decorator1
temp_func = first_pay_decorator(add_months, start_date, day_of_pay, delta_days)
first_pay_date = temp_func(start_date, day_of_pay, 1)

# Дата останньої оплати за договором:
last_pay_date = add_months(start_date, day_of_pay, srok)

# Отримуємо список дат: перша дата - це дата відкриття договору, наступні - дати оплати
# Перша дата - дата відкриття договору
list_dates = [start_date]
# Друга дата - дата першої оплати
list_dates.append(first_pay_date)
# Заносимо в список наступні дати оплат:
temp_date = first_pay_date
for i in range(srok):
    temp_date = add_months(temp_date, day_of_pay, 1)
    if temp_date <= last_pay_date:
        list_dates.append(temp_date)

# Друк списку дат для наочності
for d in list_dates:
    print(d)