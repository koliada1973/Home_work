from X_project.my_dates_funcs import *
# ===========================================================
# Використовуємо функцію PAYS_DATES_LIST для отримання списку усіх платежів договору
# Початкові дані: Start_date (дата відкриття договору)
#                 Srok (срок дії договору),
#                 Day_of_pay (день оплати),
#                 delta_days (допустима різниця між початковою датою договору та датою першої оплати)
# ===========================================================

# Створення нового номеру оплати
def f_наступний_номер_платежу(list_pays: list) -> int:
    last_pay = list_pays[-1]
    return last_pay['номер_платежу'] + 1


# Створення та заповнення словника оплати
def f_заповнення_платежу(номер_платежу: int, дата: date, платіж: float, погашення_відсотків: float, борг_по_відсоткам: float, погашення_кредиту: float, сума_залишку: float) -> dict:
    payment = {
                'номер_платежу': номер_платежу,
                'дата': дата,
                'платіж': платіж,
                'погашення_відсотків': погашення_відсотків,
                'борг_по_відсоткам': борг_по_відсоткам,
                'погашення_кредиту': погашення_кредиту,
                'сума_залишку': сума_залишку,
                }
    return payment


# Розрахунок наступної оплати
def f_наступний_платіж(номер_платежу, date1: date, date2: date, платіж: float, Процент: float, борг_по_відсоткам: float, сума_залишку: float) -> dict:
    кількість_днів = (date2 - date1).days
    нараховані_відсотки = round(сума_залишку * кількість_днів * Процент/100, 2)
    result_list =[]
    if нараховані_відсотки < 0:
        погашення_відсотків = 0
    if платіж < борг_по_відсоткам:
        борг_по_відсоткам = round(борг_по_відсоткам - платіж, 2)
        сума_залишку = сума_залишку
        погашення_відсотків = 0
        погашення_кредиту = 0
    elif платіж < (борг_по_відсоткам + нараховані_відсотки):
        борг_по_відсоткам = round(((борг_по_відсоткам + нараховані_відсотки) - платіж), 2)
        погашення_відсотків = платіж
        сума_залишку = сума_залишку
        погашення_кредиту = 0
    else:
        погашення_кредиту = round(платіж - (борг_по_відсоткам + нараховані_відсотки), 2)
        сума_залишку = round(сума_залишку - погашення_кредиту, 2)
        погашення_відсотків = нараховані_відсотки
        борг_по_відсоткам = 0
    return f_заповнення_платежу(номер_платежу, date2, платіж, погашення_відсотків, борг_по_відсоткам, погашення_кредиту, сума_залишку)


def f_цикл_платежів(Начальна_дата: date, Сума:float, Термін_дії_договору: int, День_оплати: int, Процент: float, Допустима_кількість_днів_до_першої_оплати = 10) -> list:
    """Функція, що повертає список словників оплат та усіх ключових дат договору"""
    
    # Дату першої оплати отримуємо окремо з використанням декоратора (присвоюємо змінній temp_func декоратор date_decorator1):
    temp_func = f_first_pay_decorator(add_months, Начальна_дата, День_оплати, Допустима_кількість_днів_до_першої_оплати)
    # Дата першої оплати:
    дата_першої_оплати = temp_func(Начальна_дата, День_оплати, 1)
    # Дата останньої оплати за договором:
    кінцева_дата_договору = add_months(Начальна_дата, День_оплати, Термін_дії_договору)
    # Початковий варіант суми оплати = Сума кредиту / Срок
    платіж = round(Сума * ((100 + Процент * 365) / 100) / Термін_дії_договору, 2)


    # Створюємо список оплат:
    загальний_список_платежів = []
    # Перший рядок списку - дані на момент відкриття договору:
    загальний_список_платежів.append(f_заповнення_платежу(0, Начальна_дата, 0, 0, 0, 0, Сума))
    # Другий рядок списку - перша оплата:
    номер_платежу = f_наступний_номер_платежу(загальний_список_платежів)
    загальний_список_платежів.append(f_наступний_платіж(номер_платежу, Начальна_дата, дата_першої_оплати, платіж, Процент, 0, Сума))
    # Заносимо наступні оплати:
    for i in range(Термін_дії_договору):
        попередній_платіж = загальний_список_платежів[-1]
        next_date = add_months(попередній_платіж['дата'], День_оплати, 1)
        if next_date <= кінцева_дата_договору:
            pay_number = f_наступний_номер_платежу(загальний_список_платежів)
            загальний_список_платежів.append(f_наступний_платіж(pay_number, попередній_платіж['дата'], next_date, платіж, Процент, попередній_платіж['борг_по_відсоткам'], попередній_платіж['сума_залишку']))
    return загальний_список_платежів